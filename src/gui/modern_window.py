import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import asyncio
import threading
from tkinterdnd2 import DND_FILES, TkinterDnD
import os
from ..translator.xlsx_processor import XlsxProcessor

class ModernWindow:
    def __init__(self):
        self.root = TkinterDnD.Tk()
        self.root.title("XLSX翻译工具")
        self.root.geometry("700x650")
        self.root.configure(bg='#f0f0f0')
        
        self.processor = XlsxProcessor()
        self.setup_styles()
        self.setup_ui()
        
    def setup_styles(self):
        style = ttk.Style()
        style.theme_use('clam')
        
        # 配置样式
        style.configure('Title.TLabel', font=('Arial', 16, 'bold'), background='#f0f0f0')
        style.configure('Subtitle.TLabel', font=('Arial', 10), background='#f0f0f0', foreground='#666')
        style.configure('Modern.TButton', font=('Arial', 10, 'bold'), padding=(20, 10))
        style.configure('Success.TLabel', foreground='#28a745', background='#f0f0f0')
        style.configure('Error.TLabel', foreground='#dc3545', background='#f0f0f0')
        
    def setup_ui(self):
        # 主容器
        main_container = tk.Frame(self.root, bg='#f0f0f0', padx=30, pady=20)
        main_container.pack(fill=tk.BOTH, expand=True)
        
        # 标题
        title_label = ttk.Label(main_container, text="XLSX 翻译工具", style='Title.TLabel')\n        title_label.pack(pady=(0, 5))\n        \n        subtitle_label = ttk.Label(main_container, text="支持拖拽文件，快速批量翻译", style='Subtitle.TLabel')\n        subtitle_label.pack(pady=(0, 20))\n        \n        # 文件拖拽区域\n        self.create_drop_zone(main_container)\n        \n        # 语言选择\n        self.create_language_section(main_container)\n        \n        # 翻译按钮\n        self.create_action_section(main_container)\n        \n        # 进度区域\n        self.create_progress_section(main_container)\n        \n        # 日志区域\n        self.create_log_section(main_container)\n        \n    def create_drop_zone(self, parent):\n        # 文件选择框架\n        file_frame = tk.Frame(parent, bg='#f0f0f0')\n        file_frame.pack(fill=tk.X, pady=(0, 20))\n        \n        # 拖拽区域\n        self.drop_zone = tk.Frame(file_frame, bg='#ffffff', relief='solid', bd=2, height=120)\n        self.drop_zone.pack(fill=tk.X, pady=(0, 10))\n        self.drop_zone.pack_propagate(False)\n        \n        # 拖拽区域内容\n        drop_content = tk.Frame(self.drop_zone, bg='#ffffff')\n        drop_content.place(relx=0.5, rely=0.5, anchor='center')\n        \n        drop_icon = tk.Label(drop_content, text="📁", font=('Arial', 24), bg='#ffffff', fg='#007acc')\n        drop_icon.pack()\n        \n        drop_text = tk.Label(drop_content, text="拖拽 XLSX 文件到此处\\n或点击选择文件", \n                           font=('Arial', 11), bg='#ffffff', fg='#666', justify='center')\n        drop_text.pack(pady=(5, 0))\n        \n        # 绑定拖拽事件\n        self.drop_zone.drop_target_register(DND_FILES)\n        self.drop_zone.dnd_bind('<<Drop>>', self.on_file_drop)\n        self.drop_zone.bind('<Button-1>', lambda e: self.select_file())\n        drop_content.bind('<Button-1>', lambda e: self.select_file())\n        drop_icon.bind('<Button-1>', lambda e: self.select_file())\n        drop_text.bind('<Button-1>', lambda e: self.select_file())\n        \n        # 文件路径显示\n        self.file_path = tk.StringVar()\n        self.file_label = ttk.Label(file_frame, textvariable=self.file_path, \n                                  font=('Arial', 9), foreground='#007acc')\n        self.file_label.pack()\n        \n    def create_language_section(self, parent):\n        lang_frame = tk.Frame(parent, bg='#f0f0f0')\n        lang_frame.pack(fill=tk.X, pady=(0, 20))\n        \n        lang_label = ttk.Label(lang_frame, text="目标语言", font=('Arial', 12, 'bold'), background='#f0f0f0')\n        lang_label.pack(anchor='w', pady=(0, 8))\n        \n        self.target_lang = tk.StringVar(value="英语")\n        lang_combo = ttk.Combobox(lang_frame, textvariable=self.target_lang, \n                                values=["英语", "中文", "日语", "韩语", "法语", "德语", "西班牙语", "俄语"], \n                                state="readonly", font=('Arial', 10), width=15)\n        lang_combo.pack(anchor='w')\n        \n    def create_action_section(self, parent):\n        action_frame = tk.Frame(parent, bg='#f0f0f0')\n        action_frame.pack(fill=tk.X, pady=(0, 20))\n        \n        self.translate_btn = ttk.Button(action_frame, text="🚀 开始翻译", \n                                      command=self.start_translation, style='Modern.TButton')\n        self.translate_btn.pack()\n        \n    def create_progress_section(self, parent):\n        progress_frame = tk.Frame(parent, bg='#f0f0f0')\n        progress_frame.pack(fill=tk.X, pady=(0, 15))\n        \n        self.progress = ttk.Progressbar(progress_frame, mode='determinate', length=400)\n        self.progress.pack(pady=(0, 8))\n        \n        self.status_label = ttk.Label(progress_frame, text="请选择文件开始翻译", \n                                    font=('Arial', 9), background='#f0f0f0', foreground='#666')\n        self.status_label.pack()\n        \n    def create_log_section(self, parent):\n        log_frame = tk.LabelFrame(parent, text="翻译日志", font=('Arial', 10, 'bold'), \n                                bg='#f0f0f0', fg='#333', padx=10, pady=10)\n        log_frame.pack(fill=tk.BOTH, expand=True)\n        \n        # 日志文本框容器\n        log_container = tk.Frame(log_frame, bg='#f0f0f0')\n        log_container.pack(fill=tk.BOTH, expand=True)\n        \n        self.log_text = tk.Text(log_container, height=10, wrap=tk.WORD, \n                              font=('Consolas', 9), bg='#ffffff', fg='#333',\n                              relief='flat', bd=1)\n        scrollbar = ttk.Scrollbar(log_container, orient=\"vertical\", command=self.log_text.yview)\n        self.log_text.configure(yscrollcommand=scrollbar.set)\n        \n        self.log_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)\n        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)\n        \n    def on_file_drop(self, event):\n        files = self.root.tk.splitlist(event.data)\n        if files:\n            file_path = files[0]\n            if file_path.lower().endswith('.xlsx'):\n                self.file_path.set(f"已选择: {os.path.basename(file_path)}")\n                self.selected_file = file_path\n                self.update_drop_zone_success()\n            else:\n                messagebox.showwarning("警告", "请选择 .xlsx 文件")\n                \n    def select_file(self):\n        file_path = filedialog.askopenfilename(\n            title="选择XLSX文件",\n            filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")]\n        )\n        if file_path:\n            self.file_path.set(f"已选择: {os.path.basename(file_path)}")\n            self.selected_file = file_path\n            self.update_drop_zone_success()\n            \n    def update_drop_zone_success(self):\n        self.drop_zone.configure(bg='#e8f5e8', relief='solid', bd=2)\n        for child in self.drop_zone.winfo_children():\n            self.update_widget_bg(child, '#e8f5e8')\n            \n    def update_widget_bg(self, widget, bg):\n        try:\n            widget.configure(bg=bg)\n            for child in widget.winfo_children():\n                self.update_widget_bg(child, bg)\n        except:\n            pass\n            \n    def start_translation(self):\n        if not hasattr(self, 'selected_file'):\n            messagebox.showwarning("警告", "请先选择文件")\n            return\n            \n        self.translate_btn.config(state=\"disabled\", text=\"翻译中...\")\n        self.progress['value'] = 0\n        self.log_text.delete(1.0, tk.END)\n        self.add_log("🚀 开始翻译任务...")\n        \n        thread = threading.Thread(target=self.run_translation)\n        thread.daemon = True\n        thread.start()\n        \n    def add_log(self, message):\n        self.log_text.insert(tk.END, f"{message}\\n")\n        self.log_text.see(tk.END)\n        self.root.update_idletasks()\n        \n    def update_progress(self, current, total):\n        progress_value = (current / total) * 100\n        self.progress['value'] = progress_value\n        self.status_label.config(text=f"翻译进度: {current}/{total} ({progress_value:.1f}%)")\n        self.root.update_idletasks()\n        \n    def run_translation(self):\n        try:\n            loop = asyncio.new_event_loop()\n            asyncio.set_event_loop(loop)\n            \n            output_path = loop.run_until_complete(\n                self.processor.translate_xlsx(\n                    self.selected_file, \n                    self.target_lang.get(),\n                    progress_callback=lambda current, total: self.root.after(0, self.update_progress, current, total),\n                    log_callback=lambda msg: self.root.after(0, self.add_log, msg)\n                )\n            )\n            \n            self.root.after(0, self.translation_complete, output_path)\n        except Exception as e:\n            self.root.after(0, self.translation_error, str(e))\n            \n    def translation_complete(self, output_path):\n        self.progress['value'] = 100\n        self.translate_btn.config(state=\"normal\", text=\"🚀 开始翻译\")\n        self.status_label.config(text="✅ 翻译完成！")\n        self.add_log("✅ 翻译任务完成！")\n        messagebox.showinfo("完成", f"翻译完成！\\n文件保存至:\\n{output_path}")\n        \n    def translation_error(self, error_msg):\n        self.translate_btn.config(state=\"normal\", text=\"🚀 开始翻译\")\n        self.status_label.config(text="❌ 翻译失败")\n        self.add_log(f"❌ 翻译失败: {error_msg}")\n        messagebox.showerror("错误", f"翻译失败:\\n{error_msg}")\n        \n    def run(self):\n        self.root.mainloop()